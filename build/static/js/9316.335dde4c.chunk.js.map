{"version":3,"file":"static/js/9316.335dde4c.chunk.js","mappings":"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","sources":["app/tables/Table.js","app/Asset/AssetRegister.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  useTable,\r\n  useSortBy,\r\n  usePagination,\r\n  useRowSelect,\r\n  useResizeColumns,\r\n} from \"react-table\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport APIServices from \"../services/APIServices\";\r\nimport SearchBar from \"material-ui-search-bar\";\r\n\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport e from \"cors\";\r\n\r\nconst Table = (props) => {\r\n  //console.log(props.name)\r\n\r\n  const history = useHistory();\r\n\r\n  const [columns, setcolumns] = useState([]);\r\n  const [data, setdata] = useState([]);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(\"\");\r\n  const [pageSize, setPageSize] = useState(10);\r\n  const pageSizes = [10, 20, 30, 40, 50];\r\n\r\n  const [show, setShow] = useState(false);\r\n  const [select_id, setselect_id] = useState();\r\n\r\n  const [cellValue, setCellValue] = useState(\"\");\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [filterResult, setfilterResult] = React.useState([]);\r\n\r\n  const get_assetmaster = (site_ID) => {\r\n    APIServices.get_assetmaster(site_ID, page, pageSize)\r\n      .then((responseJson) => {\r\n        console.log(\"Login JSON DATA : \", responseJson);\r\n\r\n        if (responseJson.data.status === \"SUCCESS\") {\r\n          console.log(responseJson.data.status);\r\n          console.log(responseJson.data.header_count);\r\n          console.log(responseJson.data.totalPages);\r\n          setCount(responseJson.data.totalPages);\r\n          setcolumns(responseJson.data.data.header);\r\n          setdata(responseJson.data.data.result);\r\n          setfilterResult(responseJson.data.result);\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Oops...\",\r\n            text: responseJson.data.message,\r\n          });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Oops get_sitecode...\",\r\n          text: e,\r\n        });\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    let site_ID = localStorage.getItem(\"site_ID\");\r\n    //console.log(site_ID);\r\n    console.log(props.name);\r\n    get_assetmaster(site_ID);\r\n  }, [page, pageSize]);\r\n\r\n  const IndeterminateCheckbox = React.forwardRef(\r\n    ({ indeterminate, ...rest }, ref) => {\r\n      const defaultRef = React.useRef();\r\n      const resolvedRef = ref || defaultRef;\r\n\r\n      React.useEffect(() => {\r\n        resolvedRef.current.indeterminate = indeterminate;\r\n      }, [resolvedRef, indeterminate]);\r\n\r\n      return (\r\n        <>\r\n          <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n        </>\r\n      );\r\n    }\r\n  );\r\n\r\n  const getCellValue = (cell) => {\r\n    setCellValue(cell.value);\r\n\r\n    console.log(cellValue);\r\n  };\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n\r\n    selectedFlatRows,\r\n    resetResizing,\r\n    state: { selectedRowIds },\r\n  } = useTable(\r\n    { columns, data },\r\n    useSortBy,\r\n    useRowSelect,\r\n    useResizeColumns,\r\n\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: \"selection\",\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n            </div>\r\n          ),\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    }\r\n  );\r\n\r\n  const handlePageChange = (event, value) => {\r\n    setPage(value);\r\n  };\r\n\r\n  const handlePageSizeChange = (event) => {\r\n    setPageSize(event.target.value);\r\n    setPage(1);\r\n  };\r\n\r\n  const handleRowClick = (data) => {\r\n    setselect_id(data.col1);\r\n    history.push(\"/AssetFrom-1\", { select: data.col1 });\r\n\r\n    // console.log(\"data.col1 \"+\":\"+data.col1)\r\n    // console.log(\"SAdasd\"+\":\"+select_id)\r\n\r\n    //    selectedFlatRows.map(d=> {\r\n\r\n    //     if(d.original.col1 !== d.original.col1){\r\n\r\n    //         console.log(\"not select\")\r\n\r\n    //         setShow(false)\r\n    //     }else{\r\n    //         console.log(\" select\")\r\n    //         setShow(true)\r\n    //        // setselect_id(selectedFlatRows.map(d=> d.original.col1))\r\n    //         //console.log(selectedFlatRows.map(d=> d.original.col1))\r\n\r\n    //         selectedFlatRows.map(d=> setselect_id(d.original.col1))\r\n    //         //console.log(\"sdadasdasdasdasda\"+\":\"+select_id)\r\n\r\n    //         if(select_id !== select_id){\r\n\r\n    //            // console.log(\"NOT\"+\":\"+select_id)\r\n\r\n    //         }else{\r\n    //             //console.log(\"SELEC\"+\":\"+select_id)\r\n    //             history.push(\"/Asset/AssetFrom\" , {select :select_id})\r\n\r\n    //         }\r\n\r\n    //     }\r\n    //    })\r\n  };\r\n\r\n  const handleNewClick = () => {\r\n    history.push(\"/AssetFrom-1\", { select: \"New_Asset\" });\r\n  };\r\n\r\n  const setFiltereddata = (e) => {\r\n    console.log(e);\r\n    setSearch(e);\r\n\r\n    if (e == \"\") {\r\n      setdata(filterResult);\r\n    } else {\r\n      const a = filterResult.filter((item) =>\r\n        item.result.toLowerCase().includes(e.toLowerCase())\r\n      );\r\n      setdata(a); //what data u want to be searched\r\n\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <div className=\"page-header\">\r\n            <div className=\"template-demo\">\r\n              <div\r\n                className=\"btn-group\"\r\n                role=\"group\"\r\n                aria-label=\"Basic example\"\r\n              >\r\n                <button type=\"button\" className=\"btn btn-outline-secondary\">\r\n                  <i className=\"mdi mdi mdi-code-equal\"></i>\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-secondary\">\r\n                  <i className=\"mdi mdi mdi-credit-card\"></i>\r\n                </button>\r\n                <button type=\"button\" className=\"btn btn-outline-secondary\">\r\n                  <i className=\"mdi mdi-calendar\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n              <SearchBar\r\n                className=\"form-control\"\r\n                onChange={(e) => setFiltereddata(e)}\r\n                value={search}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n              <button type=\"button\" className=\"btn btn-primary btn-rounded\">\r\n                Search\r\n              </button>\r\n            </div>\r\n\r\n            <nav aria-label=\"breadcrumb\">\r\n              <ol className=\"breadcrumb\">\r\n                <div className=\"template-demo\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-secondary btn-rounded btn-icon\"\r\n                  >\r\n                    <i className=\"mdi mdi-filter\"></i>\r\n                  </button>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary btn-icon-text\"\r\n                  >\r\n                    <i className=\"mdi mdi-mixcloud btn-icon-prepend\"></i> quick\r\n                    filter\r\n                  </button>\r\n                </div>\r\n              </ol>\r\n            </nav>\r\n          </div>\r\n\r\n          <div className=\"page-header\">\r\n            <div className=\"template-demo\" isVisible={show}>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-icon-text\"\r\n                onClick={handleNewClick}\r\n              >\r\n                <i className=\"mdi mdi-file-check btn-icon-prepend\"></i> New\r\n                Asset\r\n              </button>\r\n\r\n              {show && (\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-danger btn-icon-text\"\r\n                >\r\n                  <i className=\"mdi mdi-delete-forever btn-icon-prepend\"></i>{\" \"}\r\n                  Delete\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            <nav aria-label=\"breadcrumb\">\r\n              <div className=\"row\">\r\n                <Pagination\r\n                  count={count}\r\n                  page={page}\r\n                  siblingCount={1}\r\n                  boundaryCount={1}\r\n                  variant=\"outlined\"\r\n                  shape=\"rounded\"\r\n                  onChange={handlePageChange}\r\n                />\r\n\r\n                {/* {\"  Items per Page: \"} */}\r\n                <select onChange={handlePageSizeChange} value={pageSize}>\r\n                  {pageSizes.map((size) => (\r\n                    <option key={size} value={size}>\r\n                      {size}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </nav>\r\n          </div>\r\n\r\n          <div className=\"table-responsive\">\r\n            <table\r\n              className=\"table table-hover table-bordered\"\r\n              {...getTableProps()}\r\n              on\r\n            >\r\n              <thead>\r\n                {headerGroups.map((headerGroup) => (\r\n                  <tr {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                    {headerGroup.headers.map((column) => (\r\n                      <th\r\n                        {...column.getHeaderProps(\r\n                          column.getSortByToggleProps()\r\n                        )}\r\n                        style={{\r\n                          borderBottom: \"solid 3px red\",\r\n                          color: \"black\",\r\n                        }}\r\n                        {...column.getResizerProps()}\r\n                        className={`resizer ${\r\n                          column.isResizing ? \"isResizing\" : \"\"\r\n                        }`}\r\n                      >\r\n                        {column.render(\"Header\")}\r\n\r\n                        <span>\r\n                          {column.isSorted\r\n                            ? column.isSortedDesc\r\n                              ? \"🔽\"\r\n                              : \"🔼\"\r\n                            : \"\"}\r\n                        </span>\r\n                      </th>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </thead>\r\n              <tbody {...getTableBodyProps()}>\r\n                {rows.map((row) => {\r\n                  prepareRow(row);\r\n                  return (\r\n                    <tr\r\n                      {...row.getRowProps()}\r\n                      onDoubleClick={(event) => handleRowClick(row.original, event)}\r\n                    >\r\n                      {row.cells.map((cell) => {\r\n                        return (\r\n                          <>\r\n                            {/* Here added onClick function to get cell value */}\r\n                            <td\r\n                            // onClick={()=> getCellValue(cell)}\r\n                            //     {...cell.getCellProps()}\r\n                            //     style={{\r\n                            //     padding: '10px',\r\n                            //     border: 'solid 1px gray',\r\n                            //     background: 'papayawhip',\r\n                            //     }}\r\n                            >\r\n                              {cell.render(\"Cell\")}\r\n                            </td>\r\n                          </>\r\n                        );\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","\r\n\r\nimport React,{useState,useEffect} from \"react\";\r\nimport Table from \"../tables/Table\";\r\n\r\n\r\n\r\nconst AssetRegister = (props) => {    \r\n    useEffect(() => {\r\n       \r\n        console.log(props.location.state.data);\r\n\r\n      },[]);\r\n   \r\n    return (\r\n        <div>\r\n            <div className=\"page-header\">\r\n                <h3 className=\"page-title\">\r\n                    Asset Register\r\n                </h3>       \r\n                {/* <nav aria-label=\"breadcrumb\">\r\n                    <ol className=\"breadcrumb\">\r\n                        <div className=\"template-demo\">\r\n                            <button type=\"button\" className=\"btn btn-outline-secondary btn-rounded btn-icon\">\r\n                                <i className=\"mdi mdi-dots-vertical\"></i>\r\n                            </button>\r\n\r\n                        <button type=\"button\" className=\"btn btn-outline-primary btn-icon-text\">\r\n                            <i className=\"mdi mdi-file-check btn-icon-prepend\"></i> New Asset \r\n                            </button>\r\n                        \r\n                        </div>\r\n                    </ol>\r\n                </nav>          */}\r\n            </div> \r\n            <Table name={'AssetRegister'} />\r\n        </div>\r\n       \r\n    );\r\n}\r\n\r\nexport default AssetRegister;"],"names":["props","history","useHistory","useState","columns","setcolumns","data","setdata","page","setPage","count","setCount","pageSize","setPageSize","show","setselect_id","search","setSearch","React","filterResult","setfilterResult","useEffect","site_ID","localStorage","getItem","console","log","name","APIServices","then","responseJson","status","header_count","totalPages","header","result","Swal","icon","title","text","message","catch","e","get_assetmaster","IndeterminateCheckbox","ref","indeterminate","rest","defaultRef","resolvedRef","current","type","useTable","useSortBy","useRowSelect","useResizeColumns","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","resetResizing","state","selectedRowIds","className","role","onChange","a","filter","item","toLowerCase","includes","setFiltereddata","value","isVisible","onClick","select","Pagination","siblingCount","boundaryCount","variant","shape","event","target","map","size","on","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","style","borderBottom","color","getResizerProps","isResizing","render","isSorted","isSortedDesc","getRowProps","onDoubleClick","col1","handleRowClick","original","cells","cell","location"],"sourceRoot":""}